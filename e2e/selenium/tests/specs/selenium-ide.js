// Generated by Selenium IDE
const { Builder, By, Key, until } = require("selenium-webdriver");
const assert = require("assert");

describe("Frontity", function () {
  this.timeout(30000);
  let vars;
  beforeEach(async function () {
    vars = {};
  });
  it("tiny-router", async function () {
    // Test name: tiny-router
    // Step # | name | target | value
    // 1 | open | /?frontity_name=tiny-router |
    await driver.get(
      "https://frontity-e2e.vercel.app//?frontity_name=tiny-router"
    );
    // 2 | assertText | css=[data-test-id="content"] | Home
    assert(
      (await driver
        .findElement(By.css('[data-test-id="content"]'))
        .getText()) == "Home"
    );
    // 3 | click | css=[data-button-id="switch-to-about"] |
    await driver
      .findElement(By.css('[data-button-id="switch-to-about"]'))
      .click();
    // 4 | executeScript | return window.location.pathname | pathname
    vars["pathname"] = await driver.executeScript(
      "return window.location.pathname"
    );
    // 5 | assert | pathname | /about/
    assert(vars["pathname"].toString() == "/about/");
    // 6 | assertText | css=[data-test-id="content"] | About
    assert(
      (await driver
        .findElement(By.css('[data-test-id="content"]'))
        .getText()) == "About"
    );
    // 7 | runScript | return window.history.back() |
    await driver.executeScript("return window.history.back()");
    // 8 | assertText | css=[data-test-id="content"] | Home
    assert(
      (await driver
        .findElement(By.css('[data-test-id="content"]'))
        .getText()) == "Home"
    );
  });
  it("google-ad-manager", async function () {
    // Test name: google-ad-manager
    // Step # | name | target | value
    // 1 | open | /?frontity_name=google-ad-manager |
    await driver.get(
      "https://frontity-e2e.vercel.app//?frontity_name=google-ad-manager"
    );
    // 2 | waitForElementPresent | css=#header-ad>div>iframe | 30000
    await driver.wait(
      until.elementLocated(By.css("#header-ad>div>iframe")),
      30000
    );
    // 3 | assertElementPresent | css=#header-ad>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#header-ad>div>iframe")
      );
      assert(elements.length);
    }
    // 4 | assertElementPresent | css=#footer-ad>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#footer-ad>div>iframe")
      );
      assert(elements.length);
    }
    // 5 | click | css=button#change-link |
    await driver.findElement(By.css("button#change-link")).click();
    // 6 | assertElementPresent | css=#header-ad_post>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#header-ad_post>div>iframe")
      );
      assert(elements.length);
    }
    // 7 | assertElementPresent | css=#footer-ad_post>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#footer-ad_post>div>iframe")
      );
      assert(elements.length);
    }
    // 8 | assertElementPresent | css=#content-ad_post>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#content-ad_post>div>iframe")
      );
      assert(elements.length);
    }
    // 9 | assertElementPresent | css=#content-ad_next-post>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#content-ad_next-post>div>iframe")
      );
      assert(elements.length);
    }
    // 10 | click | css=button#change-link-gpt |
    await driver.findElement(By.css("button#change-link-gpt")).click();
    // 11 | assertElementPresent | css=#post-with-gpt-ad>div>iframe |
    {
      const elements = await driver.findElements(
        By.css("#post-with-gpt-ad>div>iframe")
      );
      assert(elements.length);
    }
  });
  it("loadable", async function () {
    // Test name: loadable
    // Step # | name | target | value
    // 1 | open | /?frontity_name=loadable |
    await driver.get(
      "https://frontity-e2e.vercel.app//?frontity_name=loadable"
    );
    // 2 | assertText | css=[data-test-id='dynamic-div'] | I am the Dynamic1 component
    assert(
      (await driver
        .findElement(By.css("[data-test-id='dynamic-div']"))
        .getText()) == "I am the Dynamic1 component"
    );
    // 3 | assertText | css=[data-test-id='dynamic2-div'] | I am the Dynamic2 component
    assert(
      (await driver
        .findElement(By.css("[data-test-id='dynamic2-div']"))
        .getText()) == "I am the Dynamic2 component"
    );
    // 4 | assertText | css=[data-test-id='toggle-div'] | OFF
    assert(
      (await driver
        .findElement(By.css("[data-test-id='toggle-div']"))
        .getText()) == "OFF"
    );
    // 5 | click | css=[data-test-id='toggle-button'] |
    await driver.findElement(By.css("[data-test-id='toggle-button']")).click();
    // 6 | assertText | css=[data-test-id='toggle-div'] | ON
    assert(
      (await driver
        .findElement(By.css("[data-test-id='toggle-div']"))
        .getText()) == "ON"
    );
  });
});
